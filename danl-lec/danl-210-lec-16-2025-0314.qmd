---
title: Lecture 16
subtitle: "Web-scrapping with Python `selenium`"
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2025-03-14
execute: 
  eval: true
  echo: true
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---


```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```



# Web-scrapping with Python `selenium` {background-color="#1c4982"}



## WebDriver
- **WebDriver** is an wire protocol that defines a language-neutral interface for controlling the behavior of web browsers. 

- The purpose of WebDriver is to **control the behavior of web browsers programmatically**, allowing automated interactions such as:
	-	Extracting webpage content
	-	Opening a webpage
	-	Clicking buttons
	-	Filling out forms
	-	Running automated tests on web applications


- **Selenium WebDriver** refers to both the language bindings and the implementations of browser-controlling code.



## Driver

- Each browser requires a specific **WebDriver** implementation, called a **driver**.
	-	Web browsers (e.g., Chrome, Firefox, Edge) do not natively understand Selenium WebDriver commands.
	-	To bridge this gap, each browser has its own **WebDriver implementation**, known as a **driver**.

- The **driver** handles communication between Selenium WebDriver and the browser. 
  -	This **driver** acts as a middleman between **Selenium WebDriver** and the actual browser.

- Different browsers have specific drivers:
  - **ChromeDriver** for Chrome
  - **GeckoDriver** for Firefox

<!-- - Newer versions of Python `selenium` do **not** require manual driver downloads. -->

## Interaction Diagram

:::{.nonincremental}

- A simplified diagram of how **WebDriver** interacts with **browser** might look like this:

:::

<div style="display:block; margin:-50px;"></div>

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/driver.png" width="400px">
</p>


- WebDriver interacts with the browser via the **driver** in a two-way communication process:
  1. **Sends commands** (e.g., open a page, click a button) to the browser.
  2. **Receives responses** from the browser.



## Setting up

- Install the Chrome or FireFox web-browser if you do not have either of them.
  - I will use the Chrome.
  
- Install Selenium using `pip`:
  -  On the Spyder Console, run the following: 
    - `pip install selenium`

- [**Selenium with Python**](https://selenium-python.readthedocs.io/index.html) is a well-documented reference.


## Setting up - `webdriver.Chrome()`

:::{.nonincremental}

- To begin with, we import (1) `webdriver` from `selenium` and (2) the `By` and `Options` classes.
  - `webdriver.Chrome()` opens the Chrome browser that is being controlled by automated test software, `selenium`.

:::

```{.python}
# Import the necessary modules from the Selenium package
from selenium import webdriver  # Main module to control the browser
from selenium.webdriver.common.by import By  # Helps locate elements on the webpage
from selenium.webdriver.chrome.options import Options  # Allows setting browser options

# Create an instance of Chrome options
options = Options()
options.add_argument("window-size=1400,1200")  # Set the browser window size to 1400x1200

# Initialize the Chrome WebDriver with the specified options
driver = webdriver.Chrome(options=options)  # Correct implementation

# Now you can use 'driver' to control the Chrome browser
```




## `get()` Method in WebDriver

:::{.nonincremental}

-	`get(url)` from `webdriver` opens the specified URL in a web browser.
-	When using `webdriver` in Google Chrome, you may see the message:
	- _“Chrome is being controlled by automated test software.”_

:::

```{.python}
form_url = "https://qavbox.github.io/demo/webtable/"
driver.[?](form_url)
driver.close()
driver.quit()
```


-	`close()` terminates the current browser window.
-	`quit()` completely exits the `webdriver` session, closing a browser window.


## **Inspecting Web Elements** with `find_element()`

- Once the Google Chrome window loads with the provided URL, we need to **find specific elements** to interact with.
  - The easiest way to identify elements is by using **Developer Tools** to inspect the webpage structure.

- To inspect an element:
  1. **Right-click** anywhere on the webpage.
  2. **Select** the **Inspect** option from the pop-up menu.
  3. In the `Elements` panel, **hover over** the DOM structure to locate the desired element.


## **Inspecting Web Elements** with `find_element()`

- When inspecting an element, look for:
  - **HTML tag** (e.g., `<input>`, `<button>`, `<div>`) used for the element.
  - **Attributes** (e.g., `id`, `class`, `name`) that define the element.
  - **Attribute values** that help uniquely identify the element.
  - **Page structure** to understand how elements are nested within each other.




<!-- - Place the cursor anywhere on the webpage, *right-click* to open a pop-up menu, then *select* the **Inspect** option. -->
<!--   - In the `Elements` window, move the cursor over the DOM structure of the page until it reaches the desired element.  -->
<!--   - We then need to find information such as what HTML tag is used for the *element*, the defined *attribute*, and the *values* for the attributes and the structure of the page. -->


# Locating Web Elements by `find_element()` & `find_elements()` {background-color="#1c4982"}


## Locating Web Elements by `find_element()`

:::{.nonincremental}
- There are various strategies to locate elements in a page.
  
:::

```{.html}
find_element(By.ID, "id")
find_element(By.CLASS_NAME, "class name")
find_element(By.NAME, "name")
find_element(By.CSS_SELECTOR, "css selector")
find_element(By.TAG_NAME, "tag name")
find_element(By.LINK_TEXT, "link text")
find_element(By.PARTIAL_LINK_TEXT, "partial link text")
find_element(By.XPATH, "xpath")
```


- Selenium provides the `find_element()` method to locate elements in a page.

- To find multiple elements (these methods will return a **list**):
  - `find_elements()`


## **`find_element(By.ID, "")`**

:::: {.nonincremental}
::: {.panel-tabset}
## (1) 

- `find_element(By.ID, "")` & `find_elements(By.ID, "")`:
  - Return element(s) that match a given **ID** attribute value.

- Example HTML code where an element has an ID attribute `form1`:

```{.html}
<form id="form1">...</form>
```

## (2) 

- Example of locating the form using `find_element(By.ID, "")`:

```{.python}
form = driver.find_element(By.ID, "form1")
form.text  # Retrieves text content if available
```
:::
::::




## **`find_element(By.CLASS_NAME, "")`**

:::: {.nonincremental}
::: {.panel-tabset}
## (1)

- `find_element(By.CLASS_NAME, "")` & `find_elements(By.CLASS_NAME, "")`:
  - Return element(s) matching a specific **class attribute**.

- Example HTML code with a `homebtn` class:

```{.html}
<div class="homebtn" align="center">...</div>
```

## (2)

```{.python}
home_button = driver.find_element(By.CLASS_NAME, "homebtn")
home_button.click()  # Clicks the home button
driver.back()  # Navigates back to the previous page
```
:::
::::

## **`find_element(By.NAME, "")`**

:::: {.nonincremental}
::: {.panel-tabset}
## (1)

- `find_element(By.NAME, "")` & `find_elements(By.NAME, "")`:
  - Return element(s) with a matching **name attribute**.

- Example HTML code with a name attribute `home`:

```{.html}
<input type="button" class="btn" name="home" value="Home" />
```

## (2)

```{.python}
home_button2 = driver.find_element(By.NAME, "home")
home_button2.click()
driver.back()
```
:::
::::

## **`find_element(By.CSS_SELECTOR, "")`**

:::: {.nonincremental}
::: {.panel-tabset}
## (1)

- `find_element(By.CSS_SELECTOR, "")` & `find_elements(By.CSS_SELECTOR, "")`:
  - Locate element(s) using a **CSS selector**.

- Inspect the webpage using browser Developer Tools.
- Locate the desired element in the Elements panel.
- Right-click and select **Copy selector**
  - Let's find out CSS selector for the Home button.

## (2)

```{.python}
home_button3 = driver.find_element(By.CSS_SELECTOR, "body > div > a > input")
home_button3.click()
driver.back()
```
:::
::::


## **`find_element(By.TAG_NAME, "")`**

:::: {.nonincremental}
::: {.panel-tabset}
## (1)

- `find_element(By.TAG_NAME, "")` & `find_elements(By.TAG_NAME, "")`:
  - Locate element(s) by a specific **HTML tag**.

## (2)

```{.python}
table01 = driver.find_element(By.ID, "table01")
thead = table01.find_element(By.TAG_NAME, "thead")
thead.text
```
:::
::::

## **`find_element(By.LINK_TEXT, "")`**

:::: {.nonincremental}
::: {.panel-tabset}
## (1)

- `find_element(By.LINK_TEXT, "")` & `find_elements(By.LINK_TEXT, "")`:
  - Locate link(s) using the exact **text displayed**.

- Example HTML for a Selenium link:

```{.html}
<a href="http://www.selenium.dev/">Selenium</a>
```

## (2)

```{.python}
selenium_link = driver.find_element(By.LINK_TEXT, "Selenium")
selenium_link.click()
driver.back()
```
:::
::::

## **`find_element(By.PARTIAL_LINK_TEXT, "")`**

:::: {.nonincremental}
::: {.panel-tabset}
## (1)

- Finds link(s) containing **partial** text.

## (2)

```{.python}
Selen_links = driver.find_elements(By.PARTIAL_LINK_TEXT, "qav")
print(len(Selen_links))
Selen_links[0].click()
driver.back()
```
:::
::::



## **`find_element(By.XPATH, "")`**
### Understanding XPath

- `find_element(By.XPATH, "")` & `find_elements(By.XPATH, "")`:
  - Return element(s) that match the specified XPath query.

- **XPath** is a query language for searching and locating nodes in an **XML document**.
  - Supported by all major web browsers.
  - Used in Selenium to find elements when **ID, name, or class attributes** are not available.
  - Powerful for navigating complex HTML structures.

## Basic XPath Syntax

```{.html}
//tag_name[@attribute='value']
```

- `//` → Selects elements anywhere in the document.
- `tag_name` → HTML tag (`input`, `div`, `span`, etc.).
- `@attribute` → Attribute name (`id`, `class`, `aria-label`, etc.).
- `value` → Attribute's assigned value.



## Absolute vs. Relative XPath

- **Absolute XPath** → Defines the full path from the root node.
  - Reliable if the webpage structure does not change.
- **Relative XPath** → Defines the path starting from a known element.
  - More flexible—doesn’t break as easily if the structure changes.


## Example: Finding a Table Element with XPath

- XPath can use attributes **other than ID, name, or class** to locate elements.
- Suppose we want to retrieve data from a **second table** on a webpage.
- The table contains multiple `<tr>` (rows) and `<th>` (headers) **without** an easily identifiable ID or class.
- `find_element(By.TAG_NAME, "")` is **not reliable** due to multiple `<tr>` and `<th>` tags.

## Extracting XPath from Developer Tools

:::: {.nonincremental}

- **Inspect** the webpage using browser Developer Tools.
- Locate the desired element in the **Elements** panel.
- **Right-click** and select **Copy XPath**.
- Example extracted XPath:

:::

```{.html}
//*[@id="table02"]/tbody/tr[1]/td[1]
/html/body/form/fieldset/div/div/table/tbody/tr[1]/td[1]
```

## Finding an Element Using XPath
:::{.nonincremental}
- Locate **"Tiger Nixon"** in the second table:

:::

```{.python}
elt = driver.find_element(By.XPATH, '//*[@id="table02"]/tbody/tr[1]/td[1]')
print(elt.text)  # Output the extracted text
```

## When to Use XPath

- **Use XPath when:**
  - The element lacks a unique **ID** or **class**.
  - Other locator methods (`By.ID`, `By.CLASS_NAME`, etc.) **don't work**.
- **Limitations:**
  - XPath is **less efficient** than ID-based locators.
  - Page structure changes may break XPath-based automation.

- **For our tasks, however, XPath remains a reliable and effective method!**



## **Retrieving Attribute Values with `get_attribute()`**


:::: {.nonincremental}
::: {.panel-tabset}
## (1) 

- `get_attribute()` extracts an element's **attribute value**.
- Useful for retrieving **hidden** properties not visible on the page.

```{.html}
<a href="https://www.selenium.dev/">Selenium</a>
<input id="btn" class="btn" type="button" onclick="change_text(this)" value="Delete">
```


## (2)

```{.python}
driver.find_element(By.XPATH, '//*[@id="table01"]/tbody/tr[2]/td[3]/a').get_attribute('href')
driver.find_element(By.XPATH, '//*[@id="btn"]').get_attribute('value')
```

:::
::::

## Web-scrapping with Python `selenium`

Let's do [**Classwork 9**](https://bcdanl.github.io/210/danl-cw/danl-210-cw-09.html)!



# `NoSuchElementException` and `WebDriverWait` {background-color="#1c4982"}

## `NoSuchElementException` and `try-except` blocks

```{.python}
from selenium.common.exceptions import NoSuchElementException
try:
    elem = driver.find_element(By.XPATH, "element_xpath")
    elem.click()
except NoSuchElementException:
    pass
```


- When a web element is not found, it throws the `NoSuchElementException`.
  - `try-except` can be used to avoid the termination of the selenium code.

- This solution is to address the **inconsistency** in the DOM among the seemingly same pages.



## `WebDriverWait` with `expected_conditions`

:::: {.nonincremental}
::: {.panel-tabset}
## (1)
- If the element is not present/visible in the HTML DOM immediately, induce `WebDriverWait` with `expected_conditions` set to the proper method as follows:

- To wait for `presence_of_element_located`:

```{.python}
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# example webpage
url = "https://qavbox.github.io/demo/delay/"
driver.get(url)
```





## (2)
- If the element is not present/visible in the HTML DOM immediately, induce `WebDriverWait` with `expected_conditions` set to the proper method as follows:

- To wait for `presence_of_element_located`:

```{.python}
element = (  # 10 is timeout in seconds when an expectation is called
  WebDriverWait(driver, 10)
  .until(
    EC.presence_of_element_located(
      (By.XPATH, "element_xpath")
      )
    )
) 
```


## (3)
- To wait for `visibility_of_element_located`:

```{.python}
element = (
  WebDriverWait(driver, 20)
  .until(
    EC.visibility_of_element_located(
      (By.CSS_SELECTOR, "element_css")
      )
  )
)
```





## (4)
- To wait for `element_to_be_clickable`:

```{.python}
element = (
  WebDriverWait(driver, 20)
  .until(
    EC.element_to_be_clickable(
      (By.LINK_TEXT, "element_link_text")
      )
    )
)
```



::: 
::::


## `WebDriverWait` with `expected_conditions`

```{.python}
import time

driver.find_element(By.XPATH, '//*[@id="one"]/input').click()
time.sleep(5)
element = driver.find_element(By.XPATH, '//*[@id="two"]')
element.text
```


-  The `time.sleep()` method is an explicit wait to set the condition to be an exact time period to wait.

- A more efficient solution than `time.sleep()` would be to make `WebDriver()` wait only as long as required. 




## `WebDriverWait` with `expected_conditions`

```{.python}
driver.find_element(By.XPATH, '//*[@id="oneMore"]/input[1]').click()
driver.implicitly_wait(5)
element2 = driver.find_element(By.ID, 'delay')
```


- Implicit wait with `implicitly_wait()` directs the `webdriver` to wait for a certain measure of time before throwing an exception. 

- Once this time is set, `webdriver` will wait for the element before the exception occurs.



## Web-scrapping with Python `selenium`

Let's do [**Classwork 10**](https://bcdanl.github.io/210/danl-cw/danl-210-cw-10.html)!



